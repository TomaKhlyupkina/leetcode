/*  Базовый случай
if (n < 0) return 0; - если ступеней отрицательное, то нет путей на нее забраться
if (n === 0) return 1; - если ступеней 0, т.е. находимся на том месте, куда нужно забраться,
то один путь - просто стоять там
    Рекуррентное соотношение - сколько путей ведет на n-ую ступень
c[n] = c[n - 1] + c[n - 2]; - нужно знать, какими путями можно забраться на предыдущую и на 2 ступени назад и
все их сложить. Если мы оказались на предыдущей, то можем сделать 1 шаг и оказаться на нужной, если на 2 ступени назад,
то можем сделать 2 шага.
c[3] = c[2] + c[1] = 2 + 1 = 3;
 */

// let climbStairs = function(n) {
//     if (n < 0) {
//         return 0;
//     }
//     if (n <= 1) {
//         return 1;
//     }
//     return climbStairs(n - 1) + climbStairs(n - 2)
// };

let climbStairs = function(n, cache = []) {
    if (n < 0) {
        return 0;
    }
    if (!cache[n]) {
        if (n === 0) {
            cache[n] = 1;
        } else {
            cache[n] = climbStairs(n - 1, cache) + climbStairs(n - 2, cache)
        }
    }
    return cache[n]
};

let n = 6;
console.log(climbStairs(n))